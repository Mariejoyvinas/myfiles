Problem Set 5: Challenge - Personalized Database Design scenario with unique constraint 

1. Define Your Unique Scenario

Movie: Contains information about each movie.
Director: Contains information about each director.

The relationship between these tables is that each director can create a multiple movie, and each movie can only be assigned to a single director at a time.

 2. Apply Unique Constraints:

JM_Movie table: Ensure that each movie has a unique `movie_id` and unique `movie_title`.
MV_Director table: Ensure that each `director_name` is unique for each movie. For instance, the same director cannot be assigned the same movie title twice.

CREATE TABLE JM_Movie(
    movie_id NUMBER PRIMARY KEY,
    movie_title VARCHAR2(50) UNIQUE);

CREATE TABLE MV_Director (
    director_id NUMBER PRIMARY KEY,
    director_name VARCHAR(100),
    movie_id NUMBER,
    UNIQUE (movie_id, director_name),
    FOREIGN KEY (movie_id) REFERENCES Director(director_id)
);


3. Alter the Structure:

ALTER TABLE JM_movie
ADD year_release INT


4. Reflection:
- Data Accuracy: Unique constraints on 'movie_title' in the JM_Movie table and on `director_name` for each director in the JM_Movie table prevent duplicate entries, ensuring each movie and director is accurately recorded.

- Data Integrity: The foreign key relationship requires that each movie be linked to an active director in the MV_Director table, reducing the risk of orphaned records.

- Simplified Data Retrieval:  The unique constraint on `movie_id` and `director_name` allows you to quickly identify each directorâ€™s specific movie, making it easier to retrieve records and avoid duplicates.
